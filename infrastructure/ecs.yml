AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service with Blue-Green Deployment for Todo App'

Parameters:
  EnvironmentName:
    Description: Environment name prefix
    Type: String
    Default: todo

  ImageURI:
    Description: URI of the ECR image to deploy
    Type: String
    Default: ${AWS::AccountId}.dkr.ecr.eu-west-1.amazonaws.com/dynamodb-lab:latest

  ContainerPort:
    Description: Container port for the application
    Type: Number
    Default: 8080

  TaskCPU:
    Description: CPU units for the ECS task
    Type: String
    Default: '256'

  TaskMemory:
    Description: Memory for the ECS task
    Type: String
    Default: '512'

  DesiredContainerCount:
    Description: Desired number of containers
    Type: Number
    Default: 1

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-service
      RetentionInDays: 30

  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-blue-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "TodoAppVPC"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-green-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "TodoAppVPC"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Subnets:
        - Fn::ImportValue: !Sub "TodoAppPublicSubnet"
        - Fn::ImportValue: !Sub "TodoAppPublicSubnet2"
      SecurityGroups:
        - Fn::ImportValue: !Sub "TodoAppALBSecurityGroup"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-task
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-container
          Image: !Ref ImageURI
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: AWS_ACCESS_KEY
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/aws-access-key}}'
            - Name: AWS_SECRET_KEY
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/aws-secret-key}}'
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DYNAMODB_ENDPOINT
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/dynamodb-endpoint}}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredContainerCount
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - TargetGroupArn: !Ref BlueTargetGroup
          ContainerName: !Sub ${EnvironmentName}-container
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "TodoAppECSSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "TodoAppPublicSubnet"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-deploy-app
      ComputePlatform: ECS

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${EnvironmentName}-deploy-group
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !GetAtt ECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref Listener
            TargetGroups:
              - Name: !GetAtt BlueTargetGroup.TargetGroupName
              - Name: !GetAtt GreenTargetGroup.TargetGroupName

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${EnvironmentName}-ECSCluster"

  ServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${EnvironmentName}-ECSService"

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${EnvironmentName}-TaskDefinitionArn"

  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${EnvironmentName}-LoadBalancerDNS"

  BlueTargetGroup:
    Description: Blue Target Group Name
    Value: !GetAtt BlueTargetGroup.TargetGroupName
    Export:
      Name: !Sub "${EnvironmentName}-BlueTargetGroup"

  GreenTargetGroup:
    Description: Green Target Group Name
    Value: !GetAtt GreenTargetGroup.TargetGroupName
    Export:
      Name: !Sub "${EnvironmentName}-GreenTargetGroup"

  CodeDeployApplication:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${EnvironmentName}-CodeDeployApplication"

  CodeDeployDeploymentGroup:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub "${EnvironmentName}-CodeDeployDeploymentGroup"